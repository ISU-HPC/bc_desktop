<%-
  cmd = "/usr/bin/sinfo -ho %R"
  begin
    output, status = Open3.capture2e(cmd)
    if status.success?
      queues = output.split("\n").map(&:strip).reject(&:blank?).sort
    else
      raise output
    end
  rescue => e
    queues = []
    error = e.message.strip
  end 
-%>


---
cluster: "nova"

attributes:
  desktop: "xfce"
  bc_vnc_idle: 0
  bc_vnc_resolution:
    required: true
  bc_queue:
    value: debug

  slurm_account:
    widget: select
    label: "Account"
    options:
    <% `sacctmgr show -PQrn associations User=${USER} | cut -d '|' -f 2`.split("\n").each do |val| %>
      - ["<%= val %>", "<%= val %>"]
    <% end %>
    required: true

  custom_queue:
    label: Queue
    help: Select queue from the drop-down
    <%- if error -%>
      <span class="text-danger">Error when parsing queues:</span>
      ```
      <%= error.gsub("\n", "\n      ") %>
      ```
    <%- end -%>
  <%- if queues.blank? -%>
    widget: text_field
  <%- else -%>
    widget: select
    options:
    <%- queues.each do |q| -%>
      - [ "<%= q %>", "<%= q %>" ]
    <%- end -%>
  <%- end -%> 


  bc_num_slots: "1"

  num_cores:
    widget: "number_field"
    label: "Number of cores"
    value: 2
    help: |
      Number of cores.  Must be between 1 and 16.
    min: 0
    max: 16
    step: 1
    id: 'num_cores'
    required: true

  mem_req:
    label: "Memory required"
    help: "If no unit specified, Megabytes.  Can use 'k', 'M', 'G' suffixes.  NO DECIMALS.  Example: 3072M"
    widget: text_field
    value: "4096M"

  job_name:
    label: "Job name"
    help: "Name of job shown in queue"
    value: "nova Desktop"
    widget: text_field

  gres:
    label: "GRES (only applies to GPU jobs)"
    help: "Request GPU resources.  Format is _gpu:TYPE:COUNT_, where _TYPE_ is _a100_ or _v100_.  Example: **gpu:a100:1**"
    widget: text_field
    value: ""


form:
  - bc_vnc_idle
  - desktop
  - bc_vnc_resolution
  - slurm_account
  - custom_queue
  - bc_num_hours
  - bc_num_slots
  - gres
  - num_cores
  - mem_req
  - job_name

